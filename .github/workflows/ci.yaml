---
name: CI Plugin workflow
on: [push, pull_request]
env:
  release_mvp: true
  release_mvp_cli: true

jobs:
  check:
    #id: check_changes
    runs-on: ubuntu-latest
    outputs:
      PLUGIN_CERT_CHANGED: ${{ steps.config.outputs.PLUGIN_CERT_CHANGED }}
      VERSION: ${{ steps.config.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v2

      - name: Lookup component changes
        id: config
        run: |
          echo ::set-output name=VERSION::${GITHUB_REF#refs/*/}
          # If files on /plugins/openshift-tests was changed, then set the flag
          echo ::set-output name=PLUGIN_CERT_CHANGED::"true"

      - name: Usage sample show in-step envs
        env:
          PLUGIN_CERT_CHANGED: "${{ steps.config.outputs.PLUGIN_CERT_CHANGED }}"
        run: |
          echo "${{ steps.config.outputs.VERSION }}"
          echo "${PLUGIN_CERT_CHANGED}"

  linters:
    runs-on: ubuntu-latest
    needs:
      - check
    steps:
      - uses: actions/checkout@v2

      - name: Shellcheck - hack
        uses: azohra/shell-linter@latest
        with:
          path: "openshift-provider-cert"

      - name: Shellcheck - CLI MVP
        uses: azohra/shell-linter@latest
        with:
          path: "openshift-provider-cert"

      - name: Shellcheck - Plugin - openshift-tests
        uses: azohra/shell-linter@latest
        with:
          scandir: './tools/openshift-provider-cert-plugin/*.sh'

      - name: Shellcheck - Plugin - openshift-tests - hack
        uses: azohra/shell-linter@latest
        with:
          scandir: './tools/openshift-provider-cert-plugin/hack/*.sh'

#
# Plugin workflow check
#

#
# Tests related to plugin: openshift-tests
#
  plugin-openshift-tests-e2e:
    runs-on: ubuntu-latest
    needs:
      - check
      - linters
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Usage sample show in-step envs
        env:
          PLUGIN_CERT_CHANGED: "${{ needs.check.outputs.PLUGIN_CERT_CHANGED }}"
        run: |
          echo "${{ needs.check.outputs.VERSION }}"
          echo "$PLUGIN_CERT_CHANGED"


  plugin-openshift-tests-build:
    if: ${{ needs.check.outputs.PLUGIN_CERT_CHANGED }} == "true"
    runs-on: ubuntu-latest
    needs:
      - check
      - linters
      - plugin-openshift-tests-e2e
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: TODO - Build Container image
        env:
          VERSION: "${{ needs.check.outputs.VERSION }}"
        run: |
          echo TODO
          echo $VERSION
          echo "${{ needs.check.outputs.PLUGIN_CERT_CHANGED }}"

#
# mvp:CLI
#
  cli-mvp:
    #if: env.release_mvp_cli == true
    runs-on: ubuntu-latest
    needs:
      - check
      - linters
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: TODO
        env:
          PLUGIN_CERT_CHANGED: "${{ needs.check.outputs.PLUGIN_CERT_CHANGED }}"
        run: |
          echo "${{ needs.check.outputs.VERSION }}"
          echo "$PLUGIN_CERT_CHANGED"
          echo "$release_mvp_cli"

#
# Artifacts / outputs
#
  save-artifacts:
    if: ${{ needs.check.outputs.PLUGIN_CERT_CHANGED }} == "true"
    runs-on: ubuntu-latest
    needs:
      - check
      - plugin-openshift-tests-build
      - cli-mvp
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: TODO - Push Container images
        env:
          PLUGIN_CERT_CHANGED: "${{ needs.check.outputs.PLUGIN_CERT_CHANGED }}"
        run: |
          echo TODO
          echo "${{ needs.check.outputs.VERSION }}"
          echo "$PLUGIN_CERT_CHANGED"

      - name: TODO - Save any other build artifacts
        run: |
          echo TODO

      - name: Save MVP CLI
        uses: actions/upload-artifact@v2
        #if: env.release_mvp_cli == true
        with:
          name: openshift-provider-cert
          path: ./openshift-provider-cert

#
# Releasing
#
  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [save-artifacts]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: TODO - Push Container image
        env:
          PLUGIN_CERT_CHANGED: "${{ needs.check.outputs.PLUGIN_CERT_CHANGED }}"
        run: |
          echo TODO
          echo "${{ needs.check.outputs.VERSION }}"
          echo $PLUGIN_CERT_CHANGED
